local ensure_packer = function()
  local fn = vim.fn
  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
  if fn.empty(fn.glob(install_path)) > 0 then
    print("Cloning packer...")
    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
    vim.cmd [[packadd packer.nvim]]

    -- install binaries from mason.nvim & tsparsers
    -- vim.api.nvim_create_autocmd("User", {
    --   pattern = "PackerComplete",
    --   callback = function()
    --     vim.cmd "bw | silent! MasonInstallAll" -- close packer window
    --   end,
    -- })
    return true
  end
  return false
end

local packer_bootstrap = ensure_packer()

--[[
--
-- PLUGINS
--
--]]

-- Load all plugins
local present, packer = pcall(require, "packer")
if not present then
  return
end

-- -- load packer init options
-- local init_options = require("configs.packer").init()

-- packer.init(init_options)
return packer.startup({
  function(use)
  --[[
  --
  -- Helper modules
  --
  --]]
  use { "nvim-lua/plenary.nvim", module = "plenary" }
  use { "wbthomason/packer.nvim" }


  --[[
  --
  -- LSP
  --
  --]]
  use {
    {
      "neovim/nvim-lspconfig",
      -- opt = true,
      config = function()
        require("configs.lsp").setup()
      end,
      wants = {
	"mason",
	"mason-lspconfig",
      },
    },
    -- { "folke/neodev.nvim" },
    { "b0o/schemastore.nvim" },
    {
      "j-hui/fidget.nvim",
      -- after = "nvim-lspconfig",
      config = function()
        require("fidget").setup{}
      end
    },
    { "williamboman/mason.nvim", as = "mason" },
    { 'williamboman/mason-lspconfig.nvim', as = "mason-lspconfig" },
  }



  --[[
  --
  -- COMPLETION
  --
  --]]
  use {
    { 'hrsh7th/cmp-buffer', after = 'nvim-cmp' },
    { 'hrsh7th/cmp-path', after = 'nvim-cmp' },
    { 'hrsh7th/cmp-nvim-lua', after = 'nvim-cmp' },
    { 'hrsh7th/cmp-cmdline', after = 'nvim-cmp' },
    { 'saadparwaiz1/cmp_luasnip', after = 'nvim-cmp' },
    { 'hrsh7th/cmp-nvim-lsp', after = 'nvim-cmp' },
    { 'hrsh7th/cmp-nvim-lsp-signature-help', after = 'nvim-cmp' },
    {
      'L3MON4D3/LuaSnip',
      run = 'make install_jsregexp',
      -- event = 'InsertEnter',
      config = function()
        require("configs.completion").luasnip()
      end,
    },
    {
      'rafamadriz/friendly-snippets',
      after = 'LuaSnip',
      config = function()
        require('luasnip.loaders.from_vscode').load()
      end,
    },
    {
      'hrsh7th/nvim-cmp',
      after = 'friendly-snippets',
      config = function()
        require('configs.completion').init()
      end,
    },
  }

  --[[
  --
  -- UI
  --
  --]]

  -- Themes
  -- use {
  --   "catppuccin/nvim",
  --   as = "catppuccin",
  --   config = function()
  --       require("catppuccin").setup {
  --           flavour = "latte" -- mocha, macchiato, frappe, latte
  --       }
  --       vim.api.nvim_command "colorscheme catppuccin"
  --   end
  -- }
 --  use {
 --    'liuchengxu/space-vim-theme',
 --    config = function()
	-- vim.cmd 'colorscheme space_vim_theme'
	-- vim.cmd 'highlight FloatBorder guifg=NONE'
 --    end
 --  }
 --  use {
 --    'folke/tokyonight.nvim',
 --    config = function()
	-- require("tokyonight").setup({
	--   style = "storm",
	--   styles = {
	--     comments = { italic = true },
 --    	    keywords = { italic = true },
	--     sidebars = "storm",
	--     floats = "storm",
	--   },
	--   on_highlights =  function(highlights, colors)
	--     highlights.StatusLine = {
	--       bg = colors.blue0,
	--     }
	--   end,
	-- })
	-- vim.cmd 'colorscheme tokyonight'
	-- vim.api.nvim_set_hl(0, "StatusLine", {bg='#364a82'})
 --    end
 --  }
  -- use {
  --   "sainnhe/gruvbox-material",
  --   config = function()
  --     vim.o.background="dark"
  --     vim.g.gruvbox_material_background="soft"
  --     vim.g.gruvbox_material_better_performance=1
  --     vim.cmd 'colorscheme gruvbox-material'
  --   end
  -- }
  use {
    "mcchrish/zenbones.nvim",
    config = function()
      vim.o.background="light"
      vim.g.zenbones = { colorize_diagnostic_underline_text=true, lightness="dim", darkness="warm" }
      vim.cmd('colorscheme zenbones')
    end,
    requires = "rktjmp/lush.nvim"
  }
  -- use {
  --   "muchzill4/doubletrouble",
  --   config = function()
  --     vim.o.background='dark'
  --     vim.cmd 'colorscheme doubletrouble'
  --   end
  -- }
  -- use({
  --   'projekt0n/github-nvim-theme',
  --   config = function()
  --     require('github-theme').setup({
  --       theme_style = "dark",
  --       function_style = "italic",
  --     })
  --   end
  -- })

  -- Fuzzy Finder with fzf (better performance with huge repositories and more minimalist)
  use {
    'ibhagwan/fzf-lua',
    cmd = 'FzfLua',
    config = function()
      require('fzf-lua').setup({
	winopts = {
	  height = 0.3,
	  width = 1,
	  row = 1,
	  col = 0.1,
	}
      })
    end,
    requires = { 'kyazdani42/nvim-web-devicons' }
  }

  -- Fuzzy Finder with Telescope (better API)
  use {
    {
      'nvim-telescope/telescope.nvim',
      cmd = 'Telescope',
      config = function()
        require('configs.telescope').init()
      end,
      requires = 'nvim-lua/plenary.nvim',
    },
    { 'nvim-telescope/telescope-fzf-native.nvim', after = 'telescope.nvim', run = 'make' },
    { 'nvim-telescope/telescope-project.nvim', after = 'telescope.nvim' },
  }

  -- Terminal File Manager
  use {
    "luukvbaal/nnn.nvim",
    config = function()
      require("nnn").setup({
        picker = {
	  cmd = "nnn",
	  style = {
	    border = "rounded"
	  },
	  session = "shared",
	},
	replace_netrw = "picker",
      })
    end,
  }

  -- WhichKey
  use {
    'folke/which-key.nvim',
    config = function()
      require('which-key').setup {
        layout = { layout = { spacing = 15 } },
        window = { border = 'rounded' },
      }
    end,
  }


  --[[
  --
  -- EDITOR
  --
  --]]

  -- TreeSitter
  --
  use {
    {
      "nvim-treesitter/nvim-treesitter",
      run = ":TSUpdate",
      config = function()
        require "configs.treesitter".setup()
      end,
    },
    {
      "nvim-treesitter/nvim-treesitter-textobjects",
      after = "nvim-treesitter",
    },
  }

  --
  -- Comment with TreeSitter
  use {
    'numToStr/Comment.nvim',
    config = function()
        require('Comment').setup()
    end
  }

  -- Surround with TreeSitter
  use {
    'kylechui/nvim-surround',
    config = function ()
      require('nvim-surround').setup()
    end
  }

  use {
    "karb94/neoscroll.nvim",
    config = function ()
      require('neoscroll').setup()
    end
  }

  -- Automatically set up your configuration after cloning packer.nvim
  -- Put this at the end after all plugins
  if packer_bootstrap then
    print("Syncing packages..")
    require('packer').sync()
  end
end,
config = {
  profile = { enable = false },
  auto_clean = true,
  compile_on_sync = true,
  git = { clone_timeout = 6000 },
  prompt_border = "rounded",
  display = {
    working_sym = "ﲊ",
    error_sym = "✗ ",
    done_sym = " ",
    removed_sym = " ",
    moved_sym = "",
    open_fn = function()
      return require("packer.util").float { border = "rounded" }
    end,
  },
},
})
